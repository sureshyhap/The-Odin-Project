/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => EmacsTextEditorPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var EmacsTextEditorPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    // TODO: Consider possibility migrate to native selection mechanism
    this.selectFrom = void 0;
  }
  onload() {
    console.log("loading plugin: Emacs text editor");
    this.addCommand({
      id: "forward-char",
      name: "Forward char",
      editorCallback: (editor, _) => {
        this.withSelectionUpdate(editor, () => {
          editor.exec("goRight");
        });
      }
    });
    this.addCommand({
      id: "backward-char",
      name: "Backward char",
      editorCallback: (editor, _) => {
        this.withSelectionUpdate(editor, () => {
          editor.exec("goLeft");
        });
      }
    });
    this.addCommand({
      id: "next-line",
      name: "Next line",
      editorCallback: (editor, _) => {
        this.withSelectionUpdate(editor, () => {
          editor.exec("goDown");
        });
      }
    });
    this.addCommand({
      id: "previous-line",
      name: "Previous line",
      editorCallback: (editor, _) => {
        this.withSelectionUpdate(editor, () => {
          editor.exec("goUp");
        });
      }
    });
    this.addCommand({
      id: "forward-word",
      name: "Forward word",
      editorCallback: (editor, _) => {
        this.withSelectionUpdate(editor, () => {
          editor.exec("goWordRight");
        });
      }
    });
    this.addCommand({
      id: "backward-word",
      name: "Backward word",
      editorCallback: (editor, _) => {
        this.withSelectionUpdate(editor, () => {
          editor.exec("goWordLeft");
        });
      }
    });
    this.addCommand({
      id: "move-end-of-line",
      name: "Move end of line",
      editorCallback: (editor, _) => {
        this.withSelectionUpdate(editor, () => {
          const cursor = editor.getCursor();
          const lineContent = editor.getLine(cursor.line);
          editor.setCursor({ line: cursor.line, ch: lineContent.length });
        });
      }
    });
    this.addCommand({
      id: "move-beginning-of-line",
      name: "Move cursor to beginning of line",
      editorCallback: (editor, _) => {
        this.withSelectionUpdate(editor, () => {
          const cursor = editor.getCursor();
          editor.setCursor({ line: cursor.line, ch: 0 });
        });
      }
    });
    this.addCommand({
      id: "beginning-of-buffer",
      name: "Beginning of buffer",
      editorCallback: (editor, _) => {
        this.withSelectionUpdate(editor, () => {
          editor.exec("goStart");
        });
      }
    });
    this.addCommand({
      id: "end-of-buffer",
      name: "End of buffer",
      editorCallback: (editor, _) => {
        this.withSelectionUpdate(editor, () => {
          editor.exec("goEnd");
        });
      }
    });
    this.addCommand({
      id: "kill-line",
      name: "Kill line",
      editorCallback: (editor, _) => {
        this.disableSelection(editor);
        const cursor = editor.getCursor();
        const lineContent = editor.getLine(cursor.line);
        if (lineContent === "") {
          editor.exec("deleteLine");
        } else {
          editor.setLine(cursor.line, lineContent.substring(0, cursor.ch));
          editor.setCursor(cursor);
        }
      }
    });
    this.addCommand({
      id: "delete-char",
      name: "Delete char",
      editorCallback: (editor, _) => {
        this.disableSelection(editor);
        this.withDeleteInText(editor, () => {
          editor.exec("goRight");
        });
      }
    });
    this.addCommand({
      id: "kill-word",
      name: "Kill word",
      editorCallback: (editor, _) => {
        this.disableSelection(editor);
        this.withDeleteInText(editor, () => {
          editor.exec("goWordRight");
        });
      }
    });
    this.addCommand({
      id: "backward-kill-word",
      name: "Backward kill word",
      editorCallback: (editor, _) => {
        this.disableSelection(editor);
        this.withDeleteInText(editor, () => {
          editor.exec("goWordLeft");
        });
      }
    });
    this.addCommand({
      id: "kill-ring-save",
      name: "Kill ring save",
      editorCallback: (editor, _) => {
        if (this.selectFrom === void 0) {
          return;
        }
        navigator.clipboard.writeText(editor.getSelection());
        this.disableSelection(editor);
      }
    });
    this.addCommand({
      id: "kill-region",
      name: "Kill region",
      editorCallback: (editor, _) => {
        if (this.selectFrom === void 0) {
          return;
        }
        navigator.clipboard.writeText(editor.getSelection());
        editor.replaceSelection("");
        this.disableSelection(editor);
      }
    });
    this.addCommand({
      id: "yank",
      name: "Yank",
      editorCallback: async (editor, _) => {
        const clipboardContent = await navigator.clipboard.readText();
        const cursor = editor.getCursor();
        if (this.selectFrom === void 0) {
          editor.replaceRange(clipboardContent, cursor);
        } else {
          editor.replaceSelection(clipboardContent);
          this.disableSelection(editor);
        }
        editor.setCursor(cursor.line, cursor.ch + clipboardContent.length);
      }
    });
    this.addCommand({
      id: "set-mark-command",
      name: "Set mark command",
      editorCallback: (editor, _) => {
        if (this.selectFrom === void 0) {
          this.selectFrom = editor.getCursor();
        } else {
          this.disableSelection(editor);
        }
      }
    });
    this.addCommand({
      id: "keyboard-quit",
      name: "Keyboard-quit",
      editorCallback: (editor, _) => {
        this.disableSelection(editor);
      }
    });
    this.addCommand({
      id: "undo",
      name: "Undo",
      editorCallback: (editor, _) => {
        editor.undo();
      }
    });
    this.addCommand({
      id: "redo",
      name: "Redo",
      editorCallback: (editor, _) => {
        editor.redo();
      }
    });
    this.addCommand({
      id: "recenter-top-bottom",
      name: "Recenter",
      editorCallback: (editor, _) => {
        const cursor = editor.getCursor();
        const range = {
          from: { line: cursor.line, ch: cursor.ch },
          to: { line: cursor.line, ch: cursor.ch }
        };
        editor.scrollIntoView(range, true);
      }
    });
  }
  onunload() {
    console.log("unloading plugin: Emacs text editor");
  }
  disableSelection(editor) {
    editor.setSelection(editor.getCursor(), editor.getCursor());
    this.selectFrom = void 0;
  }
  withSelectionUpdate(editor, callback) {
    if (this.selectFrom !== void 0) {
      editor.setSelection(editor.getCursor());
    }
    callback();
    this.updateSelectionIsNeed(editor);
  }
  updateSelectionIsNeed(editor) {
    if (this.selectFrom === void 0) {
      return;
    }
    editor.setSelection(this.selectFrom, editor.getCursor());
  }
  withDeleteInText(editor, callback) {
    const cursorBefore = editor.getCursor();
    callback();
    const cursorAfter = editor.getCursor();
    editor.setSelection(cursorBefore, cursorAfter);
    editor.replaceSelection("");
  }
};
